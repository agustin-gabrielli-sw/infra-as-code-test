@description('The name of the API Management service')
param apimServiceName string

@description('The name of the API')
param apiName string = 'mock-aisearch'

@description('The display name of the API')
param apiDisplayName string = 'Mock AI Search API'

@description('The description of the API')
param apiDescription string = 'API that connects to a WireMock instance for AI Search'

@description('The URL of the WireMock instance')
param wiremockUrl string

@description('The instrumentation key for Application Insights')
param appInsightsInstrumentationKey string = ''

@description('The resource ID for Application Insights')
param appInsightsId string = ''

@description('Name of the APIM Logger')
param apimLoggerName string = ''

@description('The subscription required for accessing the API')
param subscriptionRequired bool = false

resource apimService 'Microsoft.ApiManagement/service@2024-06-01-preview' existing = {
  name: apimServiceName
}

resource api 'Microsoft.ApiManagement/service/apis@2022-08-01' = {
  name: apiName
  parent: apimService
  properties: {
    displayName: apiDisplayName
    description: apiDescription
    serviceUrl: wiremockUrl
    path: 'mock-aisearch'
    protocols: [
      'https'
    ]
    subscriptionKeyParameterNames: {
      header: 'api-key'
      query: 'api-key'
    }
    subscriptionRequired: subscriptionRequired
    apiType: 'http'
  }
}

resource apiPolicy 'Microsoft.ApiManagement/service/apis/policies@2022-08-01' = {
  name: 'policy'
  parent: api
  properties: {
    value: loadTextContent('./policies/aisearch-policy.xml')
    format: 'rawxml'
  }
}

// Create diagnostics only if we have an App Insights ID, instrumentation key, and APIM Logger name.
// This is used to send APIM logs (i.e. traces or metrics generated by policies in this API) to App Insights.
resource apiDiagnostics 'Microsoft.ApiManagement/service/apis/diagnostics@2022-08-01' = if (!empty(appInsightsId) && !empty(appInsightsInstrumentationKey) && !empty(apimLoggerName)) {
  name: 'applicationinsights'
  parent: api
  properties: {
    alwaysLog: 'allErrors'
    httpCorrelationProtocol: 'W3C'
    logClientIp: true
    loggerId: resourceId(resourceGroup().name, 'Microsoft.ApiManagement/service/loggers', apimServiceName, apimLoggerName)
    metrics: true
    verbosity: 'verbose'
    sampling: {
      samplingType: 'fixed'
      percentage: 100
    }
  }
}

// Create an operation for the AI Search API
resource searchOperation 'Microsoft.ApiManagement/service/apis/operations@2022-08-01' = {
  name: 'search-docs'
  parent: api
  properties: {
    displayName: 'Search Documents'
    method: 'POST'
    urlTemplate: '/indexes/{mock-index}/docs/search'
    templateParameters: [
      {
        name: 'mock-index'
        type: 'string'
        required: true
        description: 'The name of the search index'
      }
    ]
    request: {
      description: 'Search request'
      representations: [
        {
          contentType: 'application/json'
        }
      ]
    }
    responses: [
      {
        statusCode: 200
        description: 'Successful response'
        representations: [
          {
            contentType: 'application/json'
          }
        ]
      }
    ]
  }
}
